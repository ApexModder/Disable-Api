plugins {
	id 'java'
	id 'idea'

	id 'net.minecraftforge.gradle' version '5.1.+'
	id 'org.spongepowered.mixin' version '0.7.+'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1'
}

version = "${mod_version}"
group = "${mod_base_package}"
archivesBaseName = "${mod_id}-${minecraft_version}"

sourceSets.main.resources.srcDirs += 'src/generated/resources'

minecraft {
	mappings channel: 'parchment', version: "${parchment_mappings}"
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			taskName 'Client'
			workingDirectory file('run/client')
			property 'forge.logging.markers', ''
			property 'forge.logging.console.level', 'debug'
			jvmArg '-XX:+AllowEnhancedClassRedefinition'

			mods {
				"${mod_id}" {
					source sourceSets.main
					source sourceSets.test
				}
			}
		}

		server {
			taskName 'Server'
			workingDirectory file('run/server')
			property 'forge.logging.markers', ''
			property 'forge.logging.console.level', 'debug'
			jvmArg '-XX:+AllowEnhancedClassRedefinition'
			args 'nogui'

			mods {
				"${mod_id}" {
					source sourceSets.main
					source sourceSets.test
				}
			}
		}
	}
}

mixin {
	config "${mod_id}.mixins.json"
}

repositories {
	mavenCentral()
	mavenLocal()
	maven { url 'https://maven.covers1624.net/' }
	maven { url 'https://dvs1.progwml6.com/files/maven/' }
	maven { url 'https://maven.blamejared.com/' }
	maven { url 'https://modmaven.dev' }
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

	def jei_version = '13.1.0.11'
	compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
	compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
	runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") // comment to disable `test_block`
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.release.set(JavaLanguageVersion.of("${java_version}").asInt())

	javaToolchains {
		compilerFor {
			languageVersion.set(JavaLanguageVersion.of("${java_version}"))
		}
	}
}

tasks.withType(Jar) {
	manifest {
		attributes([
				'Specification-Title': "${project.name}",
				'Specification-Vendor': 'ApexStudios',
				'Specification-Version': "${project.version}",
				'Implementation-Title': "${mod_name}",
				'Implementation-Version': "${project.version}",
				'Implementation-Vendor' : 'ApexStudios',
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'MixinConfigs': "${mod_id}.mixins.json"
		])
	}
}

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of("${java_version}"))
	}
}

jar.finalizedBy('reobfJar')

idea.module {
	excludeDirs << file('run')
}
